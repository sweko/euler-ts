import { Problem } from "../model/problem";
import { getSourceData } from "../helpers/problem-helpers";
import { generatePrimes } from "../helpers/primes";
import { factorize, getDivisorCount } from "../helpers/factorization";

export class HighlyDivisibleTriangular implements Problem<number> {
    get id() {
        return 12;
    }

    get description() {
        return `The sequence of triangle numbers is generated by adding the natural numbers. 
        So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
        We can see that 28 is the first triangle number to have over five divisors.

        What is the value of the first triangle number to have over five hundred divisors?`;
    }

    get input() {
        return {
            demo: [5],
            demoResult: [28],
            real: 500,
        };
    }

    public run(input: number) {
        let maxDivisors = 0;
        let triangle = 1;
        let next = 2;

        generatePrimes(1000000);

        while (maxDivisors < input) {
            console.log(`Evaluating ${triangle}`);
            const factors = factorize(triangle);
            const divisors = getDivisorCount(factors);
            console.log(`  ${triangle} has ${divisors} divisors`);

            if (divisors > maxDivisors) {
                console.log(`  setting "maxDivisors" to ${divisors} divisors for triangle ${triangle}`);
                maxDivisors = divisors;
            }

            triangle += next;
            next += 1;
        }

        return triangle;
    }
}

export default new HighlyDivisibleTriangular();
