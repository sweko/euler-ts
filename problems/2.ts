import { Problem } from "../model/problem";

export class EvenFibonacci implements Problem<number> {
    get id() {
        return 2;
    }

    get description() {
        return `Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.`;
    }

    get input() {
        return {
            demo: [10, 50],
            demoResult: [10, 44],
            real: 4000000
        };
    }

    private fibCache: { [key: number]: number } = { 0: 1, 1: 2 };

    private fibonacci(num: number) {
        if (this.fibCache[num]) {
            return this.fibCache[num];
        }

        this.fibCache[num] = this.fibonacci(num - 1) + this.fibonacci(num - 2);
        return this.fibCache[num];
    }

    public run(input: number) {
        let index = 2;
        let fib = this.fibonacci(index);
        while (fib <= input) {
            index += 1;
            fib = this.fibonacci(index);
        }
        const result = Object.values(this.fibCache).filter(f => f <= input).filter(f => f % 2 === 0).sum();
        return result;
    }
}

export default new EvenFibonacci();
